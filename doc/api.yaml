openapi: 3.0.0
info:
  title: WASAText
  description: |
    This API allows the user to become part of the WASAText Social Network.
    The user will be able to chat with other users or user groups.
  version: 0.0.1
  
  
components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      description: "Use the user identifier in place of a Bearer token"
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            description: "Error if Access token is missing or invalid"
            type: object
            properties:
              error:
                description: "Errormessage"
                type: string
                pattern: '^[A-Za-z0-9 ]+$'
                minLength: 1
                maxLength: 255
                example: "Access token is missing or invalid"
    PartnerUsernameNotFound:
      description: The partner username does not exists
      content:
        application/json:
          schema:
            description: "Error if partner username does not exists"
            type: object
            properties:
              error:
                type: string
                pattern: '^[A-Za-z0-9 ]+$'
                minLength: 1
                maxLength: 255
                example: "Partner Username not found"
    PartnerOrMessageNotFound:
      description: The recipient or message was not found.
      content:
        application/json:
          schema:
            description: "Error if recipient or message was not found"
            type: object
            properties:
              error:
                type: string
                pattern: '^[A-Za-z0-9 ]+$'
                minLength: 1
                maxLength: 255
                example: "Partner Username or message not found"
              
  parameters:
    PartnerUsername:
      name: partner-username
      in: path
      required: true
      schema:
        description: "Partner Username"
        type: string
        pattern: "^[a-zA-Z0-9_-]*$"
        minLength: 3
        maxLength: 16
        example: Maria
        
    MessageTimestamp:
      name: message-timestamp
      in: path
      required: true
      schema:
        description: "message-timestamp"
        type: string
        pattern: '^[A-Za-z0-9 ]+$'
        minLength: 1
        maxLength: 255
        format: date-time
        example: "2023-01-01T23:45:00Z"
  schemas:
    MessageResponse:
      description: "How a Message Response should look like"
      type: object
      properties:
        message:
          description: "Content of message"
          type: string
          pattern: '^[A-Za-z0-9 ]+$'
          minLength: 1
          maxLength: 255
          example: "Hello"
        timestamp:
          type: string
          pattern: '^[A-Za-z0-9 ]+$'
          minLength: 1
          maxLength: 255
          format: date-time
          example: "2023-01-01T23:45:00Z"
        sendersUsername:
          description: |
            Sender's Username. Null if not needed.
          type: string
          pattern: '^[A-Za-z0-9 ]+$'
          minLength: 1
          maxLength: 255
          example: "Bob"
          
        receivedCheckmark:
          description: "URL to the 'received' checkmark image. Null if not needed."
          type: string
          pattern: '^[A-Za-z0-9 ]+$'
          minLength: 1
          maxLength: 255
          example: "https://example.com/checkmark-received.png"
          
        readCheckmark:
          description: "URL to the 'read' checkmark image. Null if not needed."
          type: string
          pattern: '^[A-Za-z0-9 ]+$'
          minLength: 1
          maxLength: 255
          example: "https://example.com/checkmark-read.png"
          
          
security:
        - bearerAuth: []
      
tags:
  - name: Login
    description: User authentication and login endpoint
  - name: Search
    description: User search and filtering endpoint
  - name: User Profile
    description: Endpoints for managing and retrieving user profile information
  - name: Conversation
    description: Endpoints for creating, managing, and retrieving conversations
  - name: Comment
    description: Endpoints for adding, updating, and retrieving comments
  - name: Groups
    description: Endpoints for managing and retrieving user groups

paths:
  /session:
    post:
      tags:
        - Login
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              description: "Choosen Username"
              type: object
              properties:
                name:
                  type: string
                  pattern: "^.*?$"
                  minLength: 3
                  maxLength: 16
                  example: Maria
                  
        required: true
      security: []
      responses:
        "201":
          description: User log-in action successful
          content:
            application/json:
              schema:
                description: "Authentification Token"
                type: object
                properties:
                  identifier:
                    # change here if you decide to use an integer
                    # or any other type of identifier
                    type: integer
                    example: 484916884
  /users:
    get: 
      tags:
        - Search
      summary: Search for users
      description: |
        Allows the user to search for other WASAText users by username or part of a username.
      operationId: searchUser
      parameters:
        - name: name
          in: query
          required: false
          description: A partial or full username to search for
          schema:
            type: string
            pattern: '^[A-Za-z0-9 ]+$'
            minLength: 1
            maxLength: 255
            example: "Maria"
      responses:
        "200":
          description: |
            A list of users matching the search criteria.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    username:
                      type: string
                      pattern: '^[A-Za-z0-9 ]+$'
                      minLength: 1
                      maxLength: 255
                      example: "Maria"
                    profilePhoto:
                      type: string
                      pattern: '^[A-Za-z0-9 ]+$'
                      minLength: 1
                      maxLength: 255
                      example: "https://example.com/photo.jpg"
                minItems: 0
                maxItems: 500
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /user-profile:
    put:
      tags:
        - User Profile
      summary: Changes the username
      description: User can change their username shown to others
      operationId: setMyUserName
      requestBody:
        description: New username
        required: true
        content:
          application/json:
            schema:
              description: "New Username"
              type: object
              properties:
                newName:
                  type: string
                  example: Peter
                  pattern: "^.*?$"
                  minLength: 3
                  maxLength: 16
      responses:
        "200":
          description: Username has been successfully changed
          content:
            application/json:
              schema:
                description: "Returns the NewUsername"
                type: object
                properties:
                  newName:
                    type: string
                    pattern: '^[A-Za-z0-9 ]+$'
                    minLength: 1
                    maxLength: 255
                    example: Peter
        "400":
          description: User entered wrong format or too many/few characters
          content:
            application/json:
              schema:
                description: "Errormessage"
                type: object
                properties:
                  wrongInput:
                    type: string
                    pattern: '^[A-Za-z0-9 ]+$'
                    minLength: 1
                    maxLength: 255
                    enum:
                    - forbidden characters used
                    - input too short
                    - input too long
                    
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    get:
      tags:
        - User Profile
      summary: List Users Convesations
      description: |
        returns a list of all Conversations of the User
      operationId: getMyConversations
      responses:
        "200":
          description: |
            request accepted, all conversations listed in content
          content:
            application/json:
              schema:
                description: "Homeview Element"
                type: array
                minItems: 1
                maxItems: 500
                items:
                  type: object
                  properties:
                    convoName:
                      type: string
                      example: |
                        John or WASAGroup
                      pattern: "^.*?$"
                      minLength: 3
                      maxLength: 16
                    profilePicture:
                      type: string
                      pattern: '^[A-Za-z0-9 ]+$'
                      minLength: 1
                      maxLength: 255
                      example: |
                        https://www.images.com/images/{image}
                    time:
                      type: string
                      pattern: '^[A-Za-z0-9 ]+$'
                      minLength: 1
                      maxLength: 255
                      example: 21:56
                    date:
                      type: string
                      pattern: '^[A-Za-z0-9 ]+$'
                      minLength: 1
                      maxLength: 255
                      example: 23.10.2024
                    messageContent:
                      type: string
                      pattern: '^[A-Za-z0-9 ]+$'
                      minLength: 1
                      maxLength: 255
                      example: |
                        Hello or Imageresource
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /profile-picture:
    put:
      tags:
        - User Profile
      summary: Changes the Profil Picture of the user
      description: User can change their profile picture shown to others
      operationId: setMyPhoto
      requestBody:
        description: New Profil Picture
        required: true
        content:
          application/json:
            schema:
              description: "New Profile Picture URL"
              type: object
              properties:
                newPicture:
                  type: string
                  pattern: '^[A-Za-z0-9 ]+$'
                  minLength: 1
                  maxLength: 255
                  example: https://www.images.com/images/{image}
      responses:
        "200":
          description: Profil Picture has been successfully changed
          content:
            application/json:
              schema:
                description: "New Profile Picture URL"
                type: object
                properties:
                  success:
                    description: "URL to of new Profile Picture."
                    type: string
                    pattern: '^[A-Za-z0-9 ]+$'
                    minLength: 1
                    maxLength: 255
                    example: | 
                      "https://example.com/new-profile-picture.png"
                    
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /conversations/{partner-username}:
    parameters:
    - name: partner-username
      in: path
      required: true
      description: username of conversation partner
      schema:
        description: "Partners Username"
        type: string
        pattern: '^[A-Za-z0-9 ]+$'
        minLength: 3
        maxLength: 16
        example: Tom
    get:
      tags:
        - Conversation
      summary: shows the user a specific conversation
      description: |
        the user wants to see a previous conversation and can access it by using the conversation partner's username
      operationId: getConversation
      responses:
        "200":
          description: |
            Username found, result is the searched conversation
          content:
            application/json:
              schema:
                description: "Response a Conversationelement"
                type: array
                minItems: 1
                maxItems: 1000
                items:
                  $ref: "#/components/schemas/MessageResponse"
                      
        "404":
          $ref: "#/components/responses/PartnerUsernameNotFound"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    post:
      tags: [Conversation]
      summary: "Send a new message."
      description: |
        Sends a new message to the specified user. If the conversation doesn't exist yet, it will create it.
      operationId: sendMessage
      requestBody:
        description: "Message to send and additional information."
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  description: "The text message to send."
                  type: string
                  pattern: '^[A-Za-z0-9 ]+$'
                  minLength: 1
                  maxLength: 255
                  example: "Hello, how are you?"
                  
                isPhoto:
                  description: "Indicates whether the message is a photo or not."
                  type: boolean
                  example: false
                  
                photoUrl:
                  description: "The URL of the photo if the message is a photo."
                  type: string
                  pattern: '^[A-Za-z0-9 ]+$'
                  minLength: 1
                  maxLength: 255
                  example: "https://example.com/photo.jpg"
  
      responses:
        "200":
          description: "Sends a new message to an existing conversation."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "201":
          description: "New conversation successfully started and message delivered."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "404":
          $ref: "#/components/responses/PartnerUsernameNotFound"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /conversations/{partner-username}/messages/{message-timestamp}:
    parameters:
        - $ref: "#/components/parameters/PartnerUsername"
        - $ref: "#/components/parameters/MessageTimestamp"
    post:
      tags: 
        - Conversation
      summary: Forward a message to another user
      description: |
        Forwards an existing message to a different conversation partner.
      operationId: forwardMessage
      requestBody:
        description: |
          The message to forward and the new recipient.
        content:
          application/json:
            schema:
              description: "Username of the recipient"
              type: object
              properties:
                recipientUsername:
                  description: "The username of the recipient to forward the message to"
                  type: string
                  pattern: '^[A-Za-z0-9 ]+$'
                  minLength: 3
                  maxLength: 16
                  example: "JohnDoe"
      responses:
        "200":
          description: Message forwarded successfully.
          content:
            application/json:
              schema:
                description: "Successmessage"
                type: object
                properties:
                  message:
                    type: string
                    pattern: '^[A-Za-z0-9 ]+$'
                    minLength: 1
                    maxLength: 255
                    example: "Message forwarded successfully!"
                  forwardedMessage:
                    $ref: "#/components/schemas/MessageResponse"
        "404":
         $ref: "#/components/responses/PartnerOrMessageNotFound"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  
      

    delete:
        tags: 
          - Conversation
        summary: delete a message
        description: the user deletes a message
        operationId: deleteMessage
        responses:
          "200":
            description: |
              Message deleted, returns conversation without deletet message.
            content:
              application/json:
                schema:
                  description: "Response a Conversationelement"
                  type: array
                  minItems: 1
                  maxItems: 1000
                  items:
                    $ref: "#/components/schemas/MessageResponse"
          "404":
            $ref: "#/components/responses/PartnerOrMessageNotFound"
          "401":
            $ref: "#/components/responses/UnauthorizedError"
  /conversations/{partner-username}/messages/{message-timestamp}/comment:
    parameters:
        - $ref: "#/components/parameters/PartnerUsername"
        - $ref: "#/components/parameters/MessageTimestamp"
    put:
      tags:
        - Comment
      summary: make a comment
      operationId: commentMessage
      description: |
        user comments on a certain message
      requestBody:
        description: comment from user on message
        content:
          application/json:
            schema:
              description: "Commentelement"
              type: object
              properties:
                name:
                  description: |
                    URL to emoticon for the comment
                  type: string
                  pattern: '^[A-Za-z0-9 ]+$'
                  minLength: 1
                  maxLength: 255
                  example: "https://example.com/checkmark-received.png"
                  
        required: true  
      responses:
        "200":
          description: |
            successesfully commented on the message, returns conversation with commented message
          content:
            application/json:
              schema:
                description: "Responses a Conversationelement"
                type: array
                minItems: 1
                maxItems: 1000
                items:
                  $ref: "#/components/schemas/MessageResponse"
        "404":
          $ref: "#/components/responses/PartnerOrMessageNotFound"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
        tags:
          - Comment
        summary: delete a comment
        description: the user deletes a comment from a message
        operationId: uncommentMessage
        responses:
          "200":
            description: |
              Comment deleted, returns conversation without the comment on the message.
            content:
              application/json:
                schema:
                  description: "Returns a Conversationelement"
                  type: array
                  minItems: 1
                  maxItems: 1000
                  items:
                    $ref: "#/components/schemas/MessageResponse"
          "404":
            $ref: "#/components/responses/PartnerOrMessageNotFound"
          "401":
            $ref: "#/components/responses/UnauthorizedError"
  /groups:
    put:
      tags: 
        - Groups
      summary: adds a user to a group
      operationId: addToGroup
      description: |
        adds a user to an existing group, if the group doesnt exists it creates a new group
      requestBody:
        description: |
          group name and names of the users which should be added
        content:
          application/json:
            schema:
              description: "Requestelement"
              type: object
              properties:
                groupName:
                  description: |
                    Name of the Group to which the users should be added
                  type: string
                  pattern: '^[A-Za-z0-9 ]+$'
                  minLength: 3
                  maxLength: 16
                  example: "WASAGroup"
                  
                names:
                  type: array
                  minItems: 1
                  maxItems: 100
                  items:
                    type: object
                    properties:
                      username:
                        description: |
                          name of the user which should be added
                        type: string
                        pattern: '^[A-Za-z0-9 ]+$'
                        minLength: 3
                        maxLength: 16
                        example: "Harry"
                        
        required: true
      responses:
        "201":
          description: |
            Group successfully created!
          content:
            application/json:
              schema:
                description: "Successmessage"
                type: object
                properties:
                  created:
                    type: string
                    pattern: '^[A-Za-z0-9 ]+$'
                    minLength: 1
                    maxLength: 255
                    example: "Group successfully created!" 
              
              
        "200":
          description: |
            users successfully added!
          content:
            application/json:
              schema:
                description: "Successmessage"
                type: object
                properties:
                  added:
                    type: string
                    pattern: '^[A-Za-z0-9 ]+$'
                    minLength: 1
                    maxLength: 255
                    example: "Users successfully added!"
            
        "404":
          $ref: "#/components/responses/PartnerUsernameNotFound"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /groups/{groupname}:
    parameters:
    - name: groupname
      in: path
      required: true
      description: the group name
      schema:
        description: e.g., /users/Maria/groups/WASAGroup
        type: string
        pattern: '^[A-Za-z0-9 ]+$'
        minLength: 1
        maxLength: 255
        
    put:
      tags: 
        - Groups
      summary: changes group name
      operationId: setGroupName
      description: |
        changes the name of the group
      requestBody:
        description: |
          new group name
        content:
          application/json:
            schema:
              description: "New Groupname"
              type: object
              properties:
                groupName:
                  description: |
                    new group name
                  type: string
                  pattern: '^[A-Za-z0-9 ]+$'
                  minLength: 3
                  maxLength: 16
                  example: "WASAGroup"
                  
        required: true
      responses:
        "200":
          description: |
            group name successfully changed!
          content:
            application/json:
              schema:
                description: "Succsessmessage"
                type: object
                properties:
                  created:
                    type: string
                    pattern: '^[A-Za-z0-9 ]+$'
                    minLength: 1
                    maxLength: 255
                    example: "Groupname successfully changed!"
        "404":
          description: |
            group not found!
          content:
            application/json:
              schema:
                description: "Errormessage"
                type: object
                properties:
                  created:
                    type: string
                    pattern: '^[A-Za-z0-9 ]+$'
                    minLength: 1
                    maxLength: 255
                    example: "Group not found!"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      tags: 
        - Groups
      summary: leaves a group
      operationId: leaveGroup
      description: |
        user leaves the group
      responses:
        "200":
          description: |
            user left group successfully!
          content:
            application/json:
              schema:
                description: "Successmessage"
                type: object
                properties:
                  created:
                    type: string
                    pattern: '^[A-Za-z0-9 ]+$'
                    minLength: 1
                    maxLength: 255
                    example: "Left group successfully!"
        "404":
          description: |
            group not found!
          content:
            application/json:
              schema:
                description: "Errormessage"
                type: object
                properties:
                  created:
                    type: string
                    pattern: '^[A-Za-z0-9 ]+$'
                    minLength: 1
                    maxLength: 255
                    example: "Group not found!"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /groups/{groupname}/group-photo:
    parameters:
    - name: groupname
      in: path
      required: true
      description: the group name
      schema:
        description: e.g., /users/Maria/groups/WASAGroup
        type: string
        pattern: '^[A-Za-z0-9 ]+$'
        minLength: 1
        maxLength: 255
        
    put:
      tags:
        - Groups
      summary: changes group picture
      operationId: setGroupPhoto
      description: |
        changes the photo of the group
      requestBody:
        description: |
          new group photo
        content:
          application/json:
            schema:
              description: "New Group Photo URL"
              type: object
              properties:
                groupName:
                  description: |
                    new group photo
                  type: string
                  pattern: '^[A-Za-z0-9 ]+$'
                  minLength: 1
                  maxLength: 255
                  example: "https://example.com/group-photo.png"
                  
        required: true
      responses:
        "200":
          description: |
            group photo successfully changed!
          content:
            application/json:
              schema:
                description: "New Photo URL"
                type: object
                properties:
                  receivedCheckmark:
                    description: "URL of the new profile picture."
                    type: string
                    pattern: '^[A-Za-z0-9 ]+$'
                    minLength: 1
                    maxLength: 255
                    example: "https://example.com/new-group-picture.png"
                    
        "404":
          description: |
            group or new group photo not found!
          content:
            application/json:
              schema:
                description: "Errormessage"
                type: object
                properties:
                  created:
                    type: string
                    pattern: '^[A-Za-z0-9 ]+$'
                    minLength: 1
                    maxLength: 255
                    example: "Group or new group photo not found!"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    
      
      

        
        
    
                    
    
            